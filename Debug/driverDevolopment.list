
driverDevolopment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000470  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000618  08000618  00010618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000624  08000624  0001062c  2**0
                  CONTENTS
  4 .ARM          00000000  08000624  08000624  0001062c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000624  0800062c  0001062c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000624  08000624  00010624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000628  08000628  00010628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001062c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001062c  2**0
                  CONTENTS
 10 .bss          0000004c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000004c  2000004c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0001062c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000017b9  00000000  00000000  00010656  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000064b  00000000  00000000  00011e0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00000907  00000000  00000000  0001245a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000128  00000000  00000000  00012d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000001d0  00000000  00000000  00012e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00002561  00000000  00000000  00013060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001e09  00000000  00000000  000155c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00009797  00000000  00000000  000173ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00020b61  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00000228  00000000  00000000  00020bb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000600 	.word	0x08000600

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000600 	.word	0x08000600

080001e8 <EXTI0_IRQHandler>:

SPI_HandleTypedef_t SPI_HandleStructure;


void EXTI0_IRQHandler()
{
 80001e8:	b510      	push	{r4, lr}
	char msgToSend[]="Hello Word\n";
 80001ea:	4a0b      	ldr	r2, [pc, #44]	; (8000218 <EXTI0_IRQHandler+0x30>)

	if(EXTI->EXTI_PR & 0x1)
 80001ec:	4c0b      	ldr	r4, [pc, #44]	; (800021c <EXTI0_IRQHandler+0x34>)
	char msgToSend[]="Hello Word\n";
 80001ee:	ca07      	ldmia	r2, {r0, r1, r2}
{
 80001f0:	b084      	sub	sp, #16
	char msgToSend[]="Hello Word\n";
 80001f2:	ab01      	add	r3, sp, #4
 80001f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if(EXTI->EXTI_PR & 0x1)
 80001f8:	6962      	ldr	r2, [r4, #20]
 80001fa:	07d2      	lsls	r2, r2, #31
 80001fc:	d401      	bmi.n	8000202 <EXTI0_IRQHandler+0x1a>
		SPI_TransmitData_IT(&SPI_HandleStructure, (uint8_t*)msgToSend, strlen(msgToSend));


	}

}
 80001fe:	b004      	add	sp, #16
 8000200:	bd10      	pop	{r4, pc}
		EXTI->EXTI_PR |= (0X1U << 0U);
 8000202:	6962      	ldr	r2, [r4, #20]
		SPI_TransmitData_IT(&SPI_HandleStructure, (uint8_t*)msgToSend, strlen(msgToSend));
 8000204:	4806      	ldr	r0, [pc, #24]	; (8000220 <EXTI0_IRQHandler+0x38>)
		EXTI->EXTI_PR |= (0X1U << 0U);
 8000206:	f042 0201 	orr.w	r2, r2, #1
 800020a:	6162      	str	r2, [r4, #20]
		SPI_TransmitData_IT(&SPI_HandleStructure, (uint8_t*)msgToSend, strlen(msgToSend));
 800020c:	4619      	mov	r1, r3
 800020e:	220b      	movs	r2, #11
 8000210:	f000 f9ac 	bl	800056c <SPI_TransmitData_IT>
}
 8000214:	b004      	add	sp, #16
 8000216:	bd10      	pop	{r4, pc}
 8000218:	08000618 	.word	0x08000618
 800021c:	40013c00 	.word	0x40013c00
 8000220:	2000001c 	.word	0x2000001c

08000224 <SPI1_IRQHandler>:


void SPI1_IRQHandler()
{
	SPI_InterruptHandler(&SPI_HandleStructure);
 8000224:	4801      	ldr	r0, [pc, #4]	; (800022c <SPI1_IRQHandler+0x8>)
 8000226:	f000 b9bd 	b.w	80005a4 <SPI_InterruptHandler>
 800022a:	bf00      	nop
 800022c:	2000001c 	.word	0x2000001c

08000230 <main>:

}

int main(void)
{
 8000230:	b580      	push	{r7, lr}
}


static void GPIO_InitStructConfig()
{
	GPIO_InitTypeDef_t GPIO_InitStruct={0};
 8000232:	2400      	movs	r4, #0
{
 8000234:	b086      	sub	sp, #24
	GPIO_InitTypeDef_t GPIO_InitStruct={0};
 8000236:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800023a:	e9cd 4404 	strd	r4, r4, [sp, #16]

	RCC_CLOCK_GPIOD_ENABLE();															// Clock D activate
 800023e:	4d2f      	ldr	r5, [pc, #188]	; (80002fc <main+0xcc>)
	GPIO_InitStruct.pinNumber=GPIO_PIN_12 |GPIO_PIN_13 |GPIO_PIN_14 | GPIO_PIN_15;
	GPIO_InitStruct.Mode=GPIO_MODE_OUTPUT;
	GPIO_InitStruct.Speed=GPIO_OUTPUT_LOW_SPEED;
	GPIO_InitStruct.Otyte=GPIO_OTYPE_PUSH_PULL;
	GPIO_InitStruct.PuPd=GPIO_PUPD_NOPULL_NOPUSH;
	GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000240:	482f      	ldr	r0, [pc, #188]	; (8000300 <main+0xd0>)
	RCC_CLOCK_GPIOD_ENABLE();															// Clock D activate
 8000242:	6b2b      	ldr	r3, [r5, #48]	; 0x30

static void SPI_Config()
{

	RCC_SP1_CLK_ENABLE();
	SPI_HandleStructure.Instance=SPI1;
 8000244:	4e2f      	ldr	r6, [pc, #188]	; (8000304 <main+0xd4>)
	RCC_CLOCK_GPIOD_ENABLE();															// Clock D activate
 8000246:	f043 0308 	orr.w	r3, r3, #8
 800024a:	632b      	str	r3, [r5, #48]	; 0x30
 800024c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	RCC_CLOCK_GPIOA_ENABLE();															// Clock A activate														// Clock SYSCFG activate
 800024e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000250:	f043 0301 	orr.w	r3, r3, #1
 8000254:	632b      	str	r3, [r5, #48]	; 0x30
	GPIO_InitStruct.pinNumber=GPIO_PIN_12 |GPIO_PIN_13 |GPIO_PIN_14 | GPIO_PIN_15;
 8000256:	f44f 4270 	mov.w	r2, #61440	; 0xf000
	RCC_CLOCK_GPIOA_ENABLE();															// Clock A activate														// Clock SYSCFG activate
 800025a:	6b29      	ldr	r1, [r5, #48]	; 0x30
	GPIO_InitStruct.pinNumber=GPIO_PIN_12 |GPIO_PIN_13 |GPIO_PIN_14 | GPIO_PIN_15;
 800025c:	2301      	movs	r3, #1
	GPIO_Init(GPIOD, &GPIO_InitStruct);
 800025e:	4669      	mov	r1, sp
	GPIO_InitStruct.pinNumber=GPIO_PIN_12 |GPIO_PIN_13 |GPIO_PIN_14 | GPIO_PIN_15;
 8000260:	e9cd 2300 	strd	r2, r3, [sp]
	GPIO_InitStruct.pinNumber=GPIO_PIN_0;
 8000264:	2701      	movs	r7, #1
	GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000266:	f000 f8e1 	bl	800042c <GPIO_Init>
	GPIO_InitStruct.PuPd=GPIO_PUPD_PULLDOWN;
 800026a:	2302      	movs	r3, #2
	GPIO_Init(GPIOA, &GPIO_InitStruct);//configuration
 800026c:	4826      	ldr	r0, [pc, #152]	; (8000308 <main+0xd8>)
	GPIO_InitStruct.PuPd=GPIO_PUPD_PULLDOWN;
 800026e:	9304      	str	r3, [sp, #16]
	GPIO_Init(GPIOA, &GPIO_InitStruct);//configuration
 8000270:	4669      	mov	r1, sp
	memset(&GPIO_InitStruct,0,sizeof(GPIO_InitStruct));
 8000272:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8000276:	9403      	str	r4, [sp, #12]
 8000278:	9405      	str	r4, [sp, #20]
	GPIO_InitStruct.pinNumber=GPIO_PIN_0;
 800027a:	9700      	str	r7, [sp, #0]
	GPIO_Init(GPIOA, &GPIO_InitStruct);//configuration
 800027c:	f000 f8d6 	bl	800042c <GPIO_Init>
	RCC_SYSCFG_CLK_ENABLE();
 8000280:	6c6b      	ldr	r3, [r5, #68]	; 0x44
	EXTI_InitTypedef_t EXTI_InitStruct={0};
 8000282:	9400      	str	r4, [sp, #0]
	RCC_SYSCFG_CLK_ENABLE();
 8000284:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
	EXTI_LineConfig(EXTI_PortSource_GPIOA, EXTI_LineSource_0);
 8000288:	4621      	mov	r1, r4
	RCC_SYSCFG_CLK_ENABLE();
 800028a:	646b      	str	r3, [r5, #68]	; 0x44
	EXTI_LineConfig(EXTI_PortSource_GPIOA, EXTI_LineSource_0);
 800028c:	4620      	mov	r0, r4
	RCC_SYSCFG_CLK_ENABLE();
 800028e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
	EXTI_LineConfig(EXTI_PortSource_GPIOA, EXTI_LineSource_0);
 8000290:	f000 f8ae 	bl	80003f0 <EXTI_LineConfig>
	EXTI_InitStruct.EXTI_LineNumber=EXTI_LineSource_0;
 8000294:	4b1d      	ldr	r3, [pc, #116]	; (800030c <main+0xdc>)
 8000296:	9300      	str	r3, [sp, #0]
	EXTI_Init(&EXTI_InitStruct);
 8000298:	4668      	mov	r0, sp
 800029a:	f000 f865 	bl	8000368 <EXTI_Init>
	NVIC_EnableInterrupt(EXTI0_IRQNumber);
 800029e:	2006      	movs	r0, #6
 80002a0:	f000 f8b4 	bl	800040c <NVIC_EnableInterrupt>
}
static void SPI_GPIO_Config()
{
	GPIO_InitTypeDef_t GPIO_InitStruct = {0};

	GPIO_InitStruct.pinNumber=GPIO_PIN_5 | GPIO_PIN_7;  // PA5=>SCLK PA7=>MOSI
 80002a4:	22a0      	movs	r2, #160	; 0xa0
 80002a6:	2302      	movs	r3, #2
 80002a8:	e9cd 2300 	strd	r2, r3, [sp]
	GPIO_InitStruct.Mode=GPIO_MODE_AF;
	GPIO_InitStruct.Otyte=GPIO_OTYPE_PUSH_PULL;
	GPIO_InitStruct.PuPd=GPIO_PUPD_NOPULL_NOPUSH;
	GPIO_InitStruct.Speed=GPIO_OUTPUT_VERY_HIGH_SPEED;
 80002ac:	2303      	movs	r3, #3
	GPIO_InitStruct.Alternate=GPIO_AF5;

	GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002ae:	4669      	mov	r1, sp
 80002b0:	4815      	ldr	r0, [pc, #84]	; (8000308 <main+0xd8>)
	GPIO_InitStruct.Speed=GPIO_OUTPUT_VERY_HIGH_SPEED;
 80002b2:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Alternate=GPIO_AF5;
 80002b4:	2305      	movs	r3, #5
 80002b6:	9305      	str	r3, [sp, #20]
	GPIO_InitTypeDef_t GPIO_InitStruct = {0};
 80002b8:	9402      	str	r4, [sp, #8]
 80002ba:	9404      	str	r4, [sp, #16]
	GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002bc:	f000 f8b6 	bl	800042c <GPIO_Init>
	RCC_SP1_CLK_ENABLE();
 80002c0:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80002c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80002c6:	646b      	str	r3, [r5, #68]	; 0x44
 80002c8:	6c6b      	ldr	r3, [r5, #68]	; 0x44
	SPI_HandleStructure.Instance=SPI1;
 80002ca:	4b11      	ldr	r3, [pc, #68]	; (8000310 <main+0xe0>)
 80002cc:	6033      	str	r3, [r6, #0]
	SPI_HandleStructure.Init.BaudRate=SPI_BAUDRATE_DIV8;
 80002ce:	2310      	movs	r3, #16
 80002d0:	6133      	str	r3, [r6, #16]
	SPI_HandleStructure.Init.Mode=SPI_MODE_MASTER;
 80002d2:	2304      	movs	r3, #4
	SPI_Init(&SPI_HandleStructure);
 80002d4:	4630      	mov	r0, r6
	SPI_HandleStructure.Init.Mode=SPI_MODE_MASTER;
 80002d6:	6073      	str	r3, [r6, #4]
	SPI_HandleStructure.Init.SSM_CMD=SPI_SSM_ENABLE;
 80002d8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80002dc:	6173      	str	r3, [r6, #20]
	SPI_HandleStructure.Init.CPOL=SPI_CPOL_LOW;
 80002de:	e9c6 4402 	strd	r4, r4, [r6, #8]
	SPI_HandleStructure.Init.BusConfig=SPI_BUS_FullDuplex;
 80002e2:	61f4      	str	r4, [r6, #28]
	SPI_HandleStructure.Init.DFF_Format=SPI_DFF_8BITS;
 80002e4:	61b4      	str	r4, [r6, #24]
	SPI_HandleStructure.Init.Frame_Format=SPI_FRAMEFORMANT_MSB;
 80002e6:	6234      	str	r4, [r6, #32]
	SPI_Init(&SPI_HandleStructure);
 80002e8:	f000 f920 	bl	800052c <SPI_Init>
	NVIC_EnableInterrupt(SPI1_IRQNumber);
 80002ec:	2023      	movs	r0, #35	; 0x23
 80002ee:	f000 f88d 	bl	800040c <NVIC_EnableInterrupt>
	SPI_PeripheralCmd(&SPI_HandleStructure, ENABLE);
 80002f2:	4639      	mov	r1, r7
 80002f4:	4630      	mov	r0, r6
 80002f6:	f000 f92f 	bl	8000558 <SPI_PeripheralCmd>
	for(;;)
 80002fa:	e7fe      	b.n	80002fa <main+0xca>
 80002fc:	40023800 	.word	0x40023800
 8000300:	40020c00 	.word	0x40020c00
 8000304:	2000001c 	.word	0x2000001c
 8000308:	40020000 	.word	0x40020000
 800030c:	01000800 	.word	0x01000800
 8000310:	40013000 	.word	0x40013000

08000314 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000314:	480d      	ldr	r0, [pc, #52]	; (800034c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000316:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000318:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800031c:	480c      	ldr	r0, [pc, #48]	; (8000350 <LoopForever+0x6>)
  ldr r1, =_edata
 800031e:	490d      	ldr	r1, [pc, #52]	; (8000354 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000320:	4a0d      	ldr	r2, [pc, #52]	; (8000358 <LoopForever+0xe>)
  movs r3, #0
 8000322:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000324:	e002      	b.n	800032c <LoopCopyDataInit>

08000326 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000326:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000328:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800032a:	3304      	adds	r3, #4

0800032c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800032c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800032e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000330:	d3f9      	bcc.n	8000326 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000332:	4a0a      	ldr	r2, [pc, #40]	; (800035c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000334:	4c0a      	ldr	r4, [pc, #40]	; (8000360 <LoopForever+0x16>)
  movs r3, #0
 8000336:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000338:	e001      	b.n	800033e <LoopFillZerobss>

0800033a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800033a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800033c:	3204      	adds	r2, #4

0800033e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800033e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000340:	d3fb      	bcc.n	800033a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000342:	f000 f939 	bl	80005b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000346:	f7ff ff73 	bl	8000230 <main>

0800034a <LoopForever>:

LoopForever:
    b LoopForever
 800034a:	e7fe      	b.n	800034a <LoopForever>
  ldr   r0, =_estack
 800034c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000350:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000354:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000358:	0800062c 	.word	0x0800062c
  ldr r2, =_sbss
 800035c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000360:	2000004c 	.word	0x2000004c

08000364 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000364:	e7fe      	b.n	8000364 <ADC_IRQHandler>
	...

08000368 <EXTI_Init>:
  */
void EXTI_Init(EXTI_InitTypedef_t *EXTI_InitStruct)
{
	uint32_t tempValue=0;
	tempValue=(uint32_t)EXTI_BASE_ADDR;
	EXTI->EXTI_IMR &= ~(0x1U <<EXTI_InitStruct->EXTI_LineNumber);
 8000368:	4a20      	ldr	r2, [pc, #128]	; (80003ec <EXTI_Init+0x84>)
 800036a:	7803      	ldrb	r3, [r0, #0]
 800036c:	6811      	ldr	r1, [r2, #0]
{
 800036e:	b410      	push	{r4}
	EXTI->EXTI_IMR &= ~(0x1U <<EXTI_InitStruct->EXTI_LineNumber);
 8000370:	2401      	movs	r4, #1
 8000372:	fa04 f303 	lsl.w	r3, r4, r3
 8000376:	ea21 0103 	bic.w	r1, r1, r3
 800037a:	6011      	str	r1, [r2, #0]
	EXTI->EXTI_EMR &= ~(0x1U <<EXTI_InitStruct->EXTI_LineNumber);
 800037c:	6851      	ldr	r1, [r2, #4]
 800037e:	ea21 0103 	bic.w	r1, r1, r3
 8000382:	6051      	str	r1, [r2, #4]

	if(EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8000384:	78c1      	ldrb	r1, [r0, #3]
	EXTI->EXTI_IMR &= ~(0x1U <<EXTI_InitStruct->EXTI_LineNumber);
 8000386:	ea6f 0c03 	mvn.w	ip, r3
	if(EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 800038a:	b1d9      	cbz	r1, 80003c4 <EXTI_Init+0x5c>
	{
		tempValue += EXTI_InitStruct->EXTI_Mode;
 800038c:	7881      	ldrb	r1, [r0, #2]
 800038e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8000392:	f501 319e 	add.w	r1, r1, #80896	; 0x13c00
		*(__IO uint32_t *)tempValue |=(0x1U << EXTI_InitStruct->EXTI_LineNumber);
 8000396:	680c      	ldr	r4, [r1, #0]
 8000398:	431c      	orrs	r4, r3
 800039a:	600c      	str	r4, [r1, #0]
		tempValue=(uint32_t)EXTI_BASE_ADDR;
		EXTI->EXTI_RTSR &= ~(0x1U <<EXTI_InitStruct->EXTI_LineNumber);
 800039c:	6891      	ldr	r1, [r2, #8]
 800039e:	ea0c 0101 	and.w	r1, ip, r1
 80003a2:	6091      	str	r1, [r2, #8]
		EXTI->EXTI_FTSR &= ~(0x1U <<EXTI_InitStruct->EXTI_LineNumber);
 80003a4:	68d1      	ldr	r1, [r2, #12]
 80003a6:	ea0c 0101 	and.w	r1, ip, r1
 80003aa:	60d1      	str	r1, [r2, #12]

		if(EXTI_InitStruct->TriggerSelection==EXTI_TRIGGER_MODE_RF)
 80003ac:	7841      	ldrb	r1, [r0, #1]
 80003ae:	2910      	cmp	r1, #16
 80003b0:	d013      	beq.n	80003da <EXTI_Init+0x72>
			EXTI->EXTI_FTSR |= (0x1U <<EXTI_InitStruct->EXTI_LineNumber);

		}
		else
		{
			tempValue +=EXTI_InitStruct->TriggerSelection;
 80003b2:	f101 4280 	add.w	r2, r1, #1073741824	; 0x40000000
 80003b6:	f502 329e 	add.w	r2, r2, #80896	; 0x13c00
		tempValue+=EXTI_InitStruct->EXTI_Mode;
		*(__IO uint32_t*)tempValue &= ~(0x1u << EXTI_InitStruct->EXTI_LineNumber);

	}

}
 80003ba:	bc10      	pop	{r4}
			*(__IO uint32_t*)tempValue |=(0x1U << EXTI_InitStruct->EXTI_LineNumber);
 80003bc:	6811      	ldr	r1, [r2, #0]
 80003be:	430b      	orrs	r3, r1
 80003c0:	6013      	str	r3, [r2, #0]
}
 80003c2:	4770      	bx	lr
		tempValue+=EXTI_InitStruct->EXTI_Mode;
 80003c4:	7883      	ldrb	r3, [r0, #2]
}
 80003c6:	bc10      	pop	{r4}
		tempValue+=EXTI_InitStruct->EXTI_Mode;
 80003c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80003cc:	f503 339e 	add.w	r3, r3, #80896	; 0x13c00
		*(__IO uint32_t*)tempValue &= ~(0x1u << EXTI_InitStruct->EXTI_LineNumber);
 80003d0:	681a      	ldr	r2, [r3, #0]
 80003d2:	ea0c 0202 	and.w	r2, ip, r2
 80003d6:	601a      	str	r2, [r3, #0]
}
 80003d8:	4770      	bx	lr
			EXTI->EXTI_RTSR |= (0x1U <<EXTI_InitStruct->EXTI_LineNumber);
 80003da:	6891      	ldr	r1, [r2, #8]
}
 80003dc:	bc10      	pop	{r4}
			EXTI->EXTI_RTSR |= (0x1U <<EXTI_InitStruct->EXTI_LineNumber);
 80003de:	4319      	orrs	r1, r3
 80003e0:	6091      	str	r1, [r2, #8]
			EXTI->EXTI_FTSR |= (0x1U <<EXTI_InitStruct->EXTI_LineNumber);
 80003e2:	68d1      	ldr	r1, [r2, #12]
 80003e4:	430b      	orrs	r3, r1
 80003e6:	60d3      	str	r3, [r2, #12]
}
 80003e8:	4770      	bx	lr
 80003ea:	bf00      	nop
 80003ec:	40013c00 	.word	0x40013c00

080003f0 <EXTI_LineConfig>:
void EXTI_LineConfig( uint8_t PinSource,uint8_t EXTI_LineSource)
{
	uint32_t tempValue;


	tempValue = SYSCFG->SYSCFG_EXTICR[EXTI_LineSource>>2U];
 80003f0:	f001 03fc 	and.w	r3, r1, #252	; 0xfc
 80003f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
	tempValue &=~(0xFU << (4*(EXTI_LineSource&0x3))); //CLEAR PROCESS DONE!
 80003f8:	f001 0103 	and.w	r1, r1, #3
 80003fc:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8000400:	0089      	lsls	r1, r1, #2
	tempValue= (PinSource << (4*(EXTI_LineSource&0x3)));
 8000402:	fa00 f101 	lsl.w	r1, r0, r1
	tempValue = SYSCFG->SYSCFG_EXTICR[EXTI_LineSource>>2U];
 8000406:	689a      	ldr	r2, [r3, #8]
	SYSCFG->SYSCFG_EXTICR[EXTI_LineSource>>2U]=tempValue;
 8000408:	6099      	str	r1, [r3, #8]


}
 800040a:	4770      	bx	lr

0800040c <NVIC_EnableInterrupt>:
  */
void NVIC_EnableInterrupt(IRQNumber_TypeDef_t IRQNumber)
{

	uint32_t tempValue=0;
	tempValue=*((IRQNumber >> 5U)+ NVIC_ISER);
 800040c:	0943      	lsrs	r3, r0, #5
 800040e:	009b      	lsls	r3, r3, #2
 8000410:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000414:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
	tempValue &=~(0x1U << (IRQNumber & 0x1F));
 8000418:	f000 001f 	and.w	r0, r0, #31
	tempValue=*((IRQNumber >> 5U)+ NVIC_ISER);
 800041c:	6819      	ldr	r1, [r3, #0]
	tempValue &=~(0x1U << (IRQNumber & 0x1F));
 800041e:	2201      	movs	r2, #1
 8000420:	fa02 f000 	lsl.w	r0, r2, r0
	tempValue |= (0x1U << (IRQNumber & 0x1F));
 8000424:	4308      	orrs	r0, r1
	*((IRQNumber >> 5U)+ NVIC_ISER)=tempValue;
 8000426:	6018      	str	r0, [r3, #0]

}
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop

0800042c <GPIO_Init>:
  * @param  GPIO_InitTypeDef_t = User Config Structures
  * @param  pinState = GPIO_Pin_Set OR GPIO_Pin_Reset
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef_t *GPIOx,GPIO_InitTypeDef_t *GPIO_ConfigStruct)
{
 800042c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t position=0;
	uint32_t fakePosition=0;
	uint32_t lastPosition=0;
	for(position=0; position<16 ; position++)
 8000430:	2300      	movs	r3, #0
	{
		fakePosition = (0x1U << position);
		lastPosition = (uint32_t)GPIO_ConfigStruct->pinNumber & fakePosition;
 8000432:	680c      	ldr	r4, [r1, #0]
		fakePosition = (0x1U << position);
 8000434:	f04f 0e01 	mov.w	lr, #1
		if(lastPosition == fakePosition)
		{
			/*MODE Configuration*/
			uint32_t tempValue=GPIOx->MODER;
			tempValue &= ~((0x3U) << (position*2));
 8000438:	2503      	movs	r5, #3

			/*Alternate Function Configuration*/
			if(GPIO_ConfigStruct->Mode == GPIO_MODE_AF)
			{
				tempValue=GPIOx->AFR[position >> 3U];
				tempValue &=~(0xFU << ((position & (0x7U))*4));
 800043a:	260f      	movs	r6, #15
 800043c:	e002      	b.n	8000444 <GPIO_Init+0x18>
	for(position=0; position<16 ; position++)
 800043e:	3301      	adds	r3, #1
 8000440:	2b10      	cmp	r3, #16
 8000442:	d022      	beq.n	800048a <GPIO_Init+0x5e>
		fakePosition = (0x1U << position);
 8000444:	fa0e f203 	lsl.w	r2, lr, r3
		if(lastPosition == fakePosition)
 8000448:	43a2      	bics	r2, r4
 800044a:	d1f8      	bne.n	800043e <GPIO_Init+0x12>
			uint32_t tempValue=GPIOx->MODER;
 800044c:	6802      	ldr	r2, [r0, #0]
			tempValue |=(GPIO_ConfigStruct->Mode<<(position*2));
 800044e:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8000452:	005f      	lsls	r7, r3, #1
			tempValue &= ~((0x3U) << (position*2));
 8000454:	fa05 fc07 	lsl.w	ip, r5, r7
 8000458:	ea22 080c 	bic.w	r8, r2, ip
			tempValue |=(GPIO_ConfigStruct->Mode<<(position*2));
 800045c:	fa09 f207 	lsl.w	r2, r9, r7
 8000460:	ea42 0208 	orr.w	r2, r2, r8
			if(GPIO_ConfigStruct->Mode == GPIO_MODE_OUTPUT || GPIO_ConfigStruct->Mode==GPIO_MODE_AF)
 8000464:	f109 38ff 	add.w	r8, r9, #4294967295
 8000468:	f1b8 0f01 	cmp.w	r8, #1
			GPIOx->MODER=tempValue;
 800046c:	6002      	str	r2, [r0, #0]
			tempValue &= ~((0x3U) << (position*2));
 800046e:	ea6f 0c0c 	mvn.w	ip, ip
			if(GPIO_ConfigStruct->Mode == GPIO_MODE_OUTPUT || GPIO_ConfigStruct->Mode==GPIO_MODE_AF)
 8000472:	d90c      	bls.n	800048e <GPIO_Init+0x62>
				tempValue |=((GPIO_ConfigStruct->Alternate)<<((position &(0x7U))*4));
				GPIOx->AFR[position >> 3U] |=tempValue;
			}
			/*Pull Up Pull Down Configuration*/
			tempValue= GPIOx->PUPDR;
 8000474:	68c2      	ldr	r2, [r0, #12]
			tempValue &=~((0x3U) << (position*2));
 8000476:	ea0c 0c02 	and.w	ip, ip, r2
			tempValue |= (GPIO_ConfigStruct->PuPd << (position*2));
 800047a:	690a      	ldr	r2, [r1, #16]
	for(position=0; position<16 ; position++)
 800047c:	3301      	adds	r3, #1
			tempValue |= (GPIO_ConfigStruct->PuPd << (position*2));
 800047e:	40ba      	lsls	r2, r7
 8000480:	ea42 020c 	orr.w	r2, r2, ip
	for(position=0; position<16 ; position++)
 8000484:	2b10      	cmp	r3, #16
			GPIOx->PUPDR=tempValue;
 8000486:	60c2      	str	r2, [r0, #12]
	for(position=0; position<16 ; position++)
 8000488:	d1dc      	bne.n	8000444 <GPIO_Init+0x18>

		}
	}


}
 800048a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				tempValue=GPIOx->OTYPER;
 800048e:	6842      	ldr	r2, [r0, #4]
				GPIOx->OTYPER;
 8000490:	6842      	ldr	r2, [r0, #4]
				tempValue =GPIOx->OSPEEDR;
 8000492:	6882      	ldr	r2, [r0, #8]
				tempValue &=~((0x3U) << (position*2));
 8000494:	ea0c 0a02 	and.w	sl, ip, r2
				tempValue |= (GPIO_ConfigStruct->Speed << (position*2));
 8000498:	68ca      	ldr	r2, [r1, #12]
 800049a:	40ba      	lsls	r2, r7
				tempValue=GPIOx->AFR[position >> 3U];
 800049c:	ea4f 08d3 	mov.w	r8, r3, lsr #3
				tempValue |= (GPIO_ConfigStruct->Speed << (position*2));
 80004a0:	ea42 020a 	orr.w	r2, r2, sl
			if(GPIO_ConfigStruct->Mode == GPIO_MODE_AF)
 80004a4:	f1b9 0f02 	cmp.w	r9, #2
 80004a8:	eb00 0888 	add.w	r8, r0, r8, lsl #2
				GPIOx->OSPEEDR=tempValue;
 80004ac:	6082      	str	r2, [r0, #8]
			if(GPIO_ConfigStruct->Mode == GPIO_MODE_AF)
 80004ae:	d1e1      	bne.n	8000474 <GPIO_Init+0x48>
				tempValue |=((GPIO_ConfigStruct->Alternate)<<((position &(0x7U))*4));
 80004b0:	f8d1 9014 	ldr.w	r9, [r1, #20]
				tempValue=GPIOx->AFR[position >> 3U];
 80004b4:	f8d8 a020 	ldr.w	sl, [r8, #32]
				tempValue &=~(0xFU << ((position & (0x7U))*4));
 80004b8:	f003 0207 	and.w	r2, r3, #7
 80004bc:	0092      	lsls	r2, r2, #2
				tempValue |=((GPIO_ConfigStruct->Alternate)<<((position &(0x7U))*4));
 80004be:	fa09 f902 	lsl.w	r9, r9, r2
				tempValue &=~(0xFU << ((position & (0x7U))*4));
 80004c2:	fa06 f202 	lsl.w	r2, r6, r2
 80004c6:	ea2a 0202 	bic.w	r2, sl, r2
				GPIOx->AFR[position >> 3U] |=tempValue;
 80004ca:	f8d8 a020 	ldr.w	sl, [r8, #32]
 80004ce:	ea49 090a 	orr.w	r9, r9, sl
 80004d2:	ea42 0209 	orr.w	r2, r2, r9
 80004d6:	f8c8 2020 	str.w	r2, [r8, #32]
 80004da:	e7cb      	b.n	8000474 <GPIO_Init+0x48>

080004dc <SPI_TransmitHelper_16Bits>:

static SPI_TransmitHelper_16Bits(SPI_HandleTypedef_t *SPI_Handle)
{
	SPI_Handle->Instance->SPI_DR=*((uint16_t *)SPI_Handle->pTxDataAddr);
	SPI_Handle->pTxDataAddr +=sizeof(uint16_t);
	SPI_Handle->TxDataSize -=2;
 80004dc:	8d03      	ldrh	r3, [r0, #40]	; 0x28
	SPI_Handle->Instance->SPI_DR=*((uint16_t *)SPI_Handle->pTxDataAddr);
 80004de:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80004e0:	6801      	ldr	r1, [r0, #0]
	SPI_Handle->TxDataSize -=2;
 80004e2:	3b02      	subs	r3, #2
{
 80004e4:	b410      	push	{r4}
	SPI_Handle->TxDataSize -=2;
 80004e6:	b29b      	uxth	r3, r3
	SPI_Handle->Instance->SPI_DR=*((uint16_t *)SPI_Handle->pTxDataAddr);
 80004e8:	f832 4b02 	ldrh.w	r4, [r2], #2
 80004ec:	60cc      	str	r4, [r1, #12]
	SPI_Handle->pTxDataAddr +=sizeof(uint16_t);
 80004ee:	6242      	str	r2, [r0, #36]	; 0x24
	SPI_Handle->TxDataSize -=2;
 80004f0:	8503      	strh	r3, [r0, #40]	; 0x28
	if(SPI_Handle->TxDataSize ==0)
 80004f2:	b92b      	cbnz	r3, 8000500 <SPI_TransmitHelper_16Bits+0x24>
	SPI_Handle->Instance->SPI_CR[1] |= ~((0x1) << SPI_CR2_TXEIE);
 80004f4:	684a      	ldr	r2, [r1, #4]
 80004f6:	f062 0280 	orn	r2, r2, #128	; 0x80
 80004fa:	604a      	str	r2, [r1, #4]
	SPI_Handle->TxDataSize=0;
 80004fc:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
	{
		SPI_CloseISR_TX(SPI_Handle);
	}
}
 8000500:	bc10      	pop	{r4}
 8000502:	4770      	bx	lr

08000504 <SPI_TransmitHelper_8Bits>:

static SPI_TransmitHelper_8Bits(SPI_HandleTypedef_t *SPI_Handle)
{
 8000504:	b410      	push	{r4}
	SPI_Handle->Instance->SPI_DR=*((uint8_t *)SPI_Handle->pTxDataAddr);
	SPI_Handle->pTxDataAddr +=sizeof(uint8_t);
	SPI_Handle->TxDataSize --;
 8000506:	8d03      	ldrh	r3, [r0, #40]	; 0x28
	SPI_Handle->Instance->SPI_DR=*((uint8_t *)SPI_Handle->pTxDataAddr);
 8000508:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800050a:	6801      	ldr	r1, [r0, #0]
 800050c:	f812 4b01 	ldrb.w	r4, [r2], #1
 8000510:	60cc      	str	r4, [r1, #12]
	SPI_Handle->TxDataSize --;
 8000512:	3b01      	subs	r3, #1
 8000514:	b29b      	uxth	r3, r3
	SPI_Handle->pTxDataAddr +=sizeof(uint8_t);
 8000516:	6242      	str	r2, [r0, #36]	; 0x24
	SPI_Handle->TxDataSize --;
 8000518:	8503      	strh	r3, [r0, #40]	; 0x28

	if(SPI_Handle->TxDataSize ==0)
 800051a:	b92b      	cbnz	r3, 8000528 <SPI_TransmitHelper_8Bits+0x24>
	SPI_Handle->Instance->SPI_CR[1] |= ~((0x1) << SPI_CR2_TXEIE);
 800051c:	684a      	ldr	r2, [r1, #4]
 800051e:	f062 0280 	orn	r2, r2, #128	; 0x80
 8000522:	604a      	str	r2, [r1, #4]
	SPI_Handle->TxDataSize=0;
 8000524:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
	{
		SPI_CloseISR_TX(SPI_Handle);
	}
}
 8000528:	bc10      	pop	{r4}
 800052a:	4770      	bx	lr

0800052c <SPI_Init>:
  * @param  SPI_Handle = User Config Structure
  *
  * @retval None
  */
void SPI_Init(SPI_HandleTypedef_t *SPI_Handle)
{
 800052c:	b430      	push	{r4, r5}

	tempValue=SPI_Handle->Instance->SPI_CR[0];

	tempValue |=(SPI_Handle->Init.BaudRate)|(SPI_Handle->Init.CPHA)|(SPI_Handle->Init.CPOL)|(SPI_Handle->Init.DFF_Format)|(SPI_Handle->Init.Mode)\

				|(SPI_Handle->Init.Frame_Format|(SPI_Handle->Init.BusConfig)|SPI_Handle->Init.SSM_CMD);
 800052e:	e9d0 4102 	ldrd	r4, r1, [r0, #8]
 8000532:	6903      	ldr	r3, [r0, #16]
 8000534:	6982      	ldr	r2, [r0, #24]
 8000536:	6a05      	ldr	r5, [r0, #32]
 8000538:	4323      	orrs	r3, r4
 800053a:	430b      	orrs	r3, r1
 800053c:	6841      	ldr	r1, [r0, #4]
 800053e:	69c4      	ldr	r4, [r0, #28]
 8000540:	4313      	orrs	r3, r2
 8000542:	430b      	orrs	r3, r1
	tempValue=SPI_Handle->Instance->SPI_CR[0];
 8000544:	6802      	ldr	r2, [r0, #0]
				|(SPI_Handle->Init.Frame_Format|(SPI_Handle->Init.BusConfig)|SPI_Handle->Init.SSM_CMD);
 8000546:	6941      	ldr	r1, [r0, #20]
 8000548:	432b      	orrs	r3, r5
 800054a:	4323      	orrs	r3, r4
 800054c:	430b      	orrs	r3, r1
	tempValue=SPI_Handle->Instance->SPI_CR[0];
 800054e:	6811      	ldr	r1, [r2, #0]
	tempValue |=(SPI_Handle->Init.BaudRate)|(SPI_Handle->Init.CPHA)|(SPI_Handle->Init.CPOL)|(SPI_Handle->Init.DFF_Format)|(SPI_Handle->Init.Mode)\
 8000550:	430b      	orrs	r3, r1

	SPI_Handle->Instance->SPI_CR[0]=tempValue;

}
 8000552:	bc30      	pop	{r4, r5}
	SPI_Handle->Instance->SPI_CR[0]=tempValue;
 8000554:	6013      	str	r3, [r2, #0]
}
 8000556:	4770      	bx	lr

08000558 <SPI_PeripheralCmd>:
  */
void SPI_PeripheralCmd(SPI_HandleTypedef_t *SPI_Handle,Functional_State_t stateOfSPI)
{
	if(stateOfSPI == ENABLE)
	{
		SPI_Handle->Instance->SPI_CR[0]|=(0x1u << SPI_CR1_SPE);
 8000558:	6802      	ldr	r2, [r0, #0]
 800055a:	6813      	ldr	r3, [r2, #0]
	if(stateOfSPI == ENABLE)
 800055c:	2901      	cmp	r1, #1
		SPI_Handle->Instance->SPI_CR[0]|=(0x1u << SPI_CR1_SPE);
 800055e:	bf0c      	ite	eq
 8000560:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
	}
	else
	{
		SPI_Handle->Instance->SPI_CR[0] &= ~(0x1u << SPI_CR1_SPE);
 8000564:	f023 0340 	bicne.w	r3, r3, #64	; 0x40
 8000568:	6013      	str	r3, [r2, #0]


	}

}
 800056a:	4770      	bx	lr

0800056c <SPI_TransmitData_IT>:

void SPI_TransmitData_IT(SPI_HandleTypedef_t *SPI_Handle,uint8_t *qData,uint16_t sizeofData)
{
	SPI_BusStatus_t busStatusTX= SPI_Handle->busStateTx;

	if(busStatusTX != SPI_BUS_BUSY_TX)
 800056c:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8000570:	2b01      	cmp	r3, #1
 8000572:	d011      	beq.n	8000598 <SPI_TransmitData_IT+0x2c>
	{
		SPI_Handle->pTxDataAddr=(uint8_t*)qData;
		SPI_Handle->TxDataSize=(uint16_t)sizeofData;
		busStatusTX=SPI_BUS_BUSY_TX;

		if(SPI_Handle->Instance->SPI_CR[0] & ((0x1U) <<SPI_CR1_DFF))
 8000574:	6803      	ldr	r3, [r0, #0]
		SPI_Handle->pTxDataAddr=(uint8_t*)qData;
 8000576:	6241      	str	r1, [r0, #36]	; 0x24
		if(SPI_Handle->Instance->SPI_CR[0] & ((0x1U) <<SPI_CR1_DFF))
 8000578:	6819      	ldr	r1, [r3, #0]
{
 800057a:	b410      	push	{r4}


		}
		else
		{
			SPI_Handle->TXISRFunction=SPI_TransmitHelper_8Bits;
 800057c:	f411 6f00 	tst.w	r1, #2048	; 0x800
 8000580:	4c06      	ldr	r4, [pc, #24]	; (800059c <SPI_TransmitData_IT+0x30>)
		}

		//ENABLE TO INTERRUPT SQUENCE;
		SPI_Handle->Instance->SPI_CR[1] |=(0x1U << SPI_CR2_TXEIE);
 8000582:	6859      	ldr	r1, [r3, #4]
		SPI_Handle->TxDataSize=(uint16_t)sizeofData;
 8000584:	8502      	strh	r2, [r0, #40]	; 0x28
		SPI_Handle->Instance->SPI_CR[1] |=(0x1U << SPI_CR2_TXEIE);
 8000586:	f041 0180 	orr.w	r1, r1, #128	; 0x80
			SPI_Handle->TXISRFunction=SPI_TransmitHelper_8Bits;
 800058a:	4a05      	ldr	r2, [pc, #20]	; (80005a0 <SPI_TransmitData_IT+0x34>)
 800058c:	bf18      	it	ne
 800058e:	4622      	movne	r2, r4
 8000590:	62c2      	str	r2, [r0, #44]	; 0x2c

	}

}
 8000592:	bc10      	pop	{r4}
		SPI_Handle->Instance->SPI_CR[1] |=(0x1U << SPI_CR2_TXEIE);
 8000594:	6059      	str	r1, [r3, #4]
}
 8000596:	4770      	bx	lr
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	080004dd 	.word	0x080004dd
 80005a0:	08000505 	.word	0x08000505

080005a4 <SPI_InterruptHandler>:
void SPI_InterruptHandler(SPI_HandleTypedef_t *SPI_Handle)
{
	uint8_t interruptSource =0;
	uint8_t interruptFlag=0;

	interruptSource= SPI_Handle->Instance->SPI_CR[1] & (0x1U << SPI_CR2_TXEIE);
 80005a4:	6802      	ldr	r2, [r0, #0]
 80005a6:	6851      	ldr	r1, [r2, #4]
	interruptFlag = SPI_Handle->Instance->SPI_SR & (0x1U << SPI_SR_TXE);
 80005a8:	6892      	ldr	r2, [r2, #8]

	if ((interruptSource != 0) && interruptFlag !=0)
 80005aa:	0609      	lsls	r1, r1, #24
 80005ac:	d400      	bmi.n	80005b0 <SPI_InterruptHandler+0xc>
	}




}
 80005ae:	4770      	bx	lr
	if ((interruptSource != 0) && interruptFlag !=0)
 80005b0:	0792      	lsls	r2, r2, #30
 80005b2:	d5fc      	bpl.n	80005ae <SPI_InterruptHandler+0xa>
		SPI_Handle->TXISRFunction(SPI_Handle);
 80005b4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80005b6:	4718      	bx	r3

080005b8 <__libc_init_array>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	4d0d      	ldr	r5, [pc, #52]	; (80005f0 <__libc_init_array+0x38>)
 80005bc:	4c0d      	ldr	r4, [pc, #52]	; (80005f4 <__libc_init_array+0x3c>)
 80005be:	1b64      	subs	r4, r4, r5
 80005c0:	10a4      	asrs	r4, r4, #2
 80005c2:	2600      	movs	r6, #0
 80005c4:	42a6      	cmp	r6, r4
 80005c6:	d109      	bne.n	80005dc <__libc_init_array+0x24>
 80005c8:	4d0b      	ldr	r5, [pc, #44]	; (80005f8 <__libc_init_array+0x40>)
 80005ca:	4c0c      	ldr	r4, [pc, #48]	; (80005fc <__libc_init_array+0x44>)
 80005cc:	f000 f818 	bl	8000600 <_init>
 80005d0:	1b64      	subs	r4, r4, r5
 80005d2:	10a4      	asrs	r4, r4, #2
 80005d4:	2600      	movs	r6, #0
 80005d6:	42a6      	cmp	r6, r4
 80005d8:	d105      	bne.n	80005e6 <__libc_init_array+0x2e>
 80005da:	bd70      	pop	{r4, r5, r6, pc}
 80005dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80005e0:	4798      	blx	r3
 80005e2:	3601      	adds	r6, #1
 80005e4:	e7ee      	b.n	80005c4 <__libc_init_array+0xc>
 80005e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80005ea:	4798      	blx	r3
 80005ec:	3601      	adds	r6, #1
 80005ee:	e7f2      	b.n	80005d6 <__libc_init_array+0x1e>
 80005f0:	08000624 	.word	0x08000624
 80005f4:	08000624 	.word	0x08000624
 80005f8:	08000624 	.word	0x08000624
 80005fc:	08000628 	.word	0x08000628

08000600 <_init>:
 8000600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000602:	bf00      	nop
 8000604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000606:	bc08      	pop	{r3}
 8000608:	469e      	mov	lr, r3
 800060a:	4770      	bx	lr

0800060c <_fini>:
 800060c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800060e:	bf00      	nop
 8000610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000612:	bc08      	pop	{r3}
 8000614:	469e      	mov	lr, r3
 8000616:	4770      	bx	lr
